 Viking Dynasty GDD v1.72
1. High-Level Concept & Vision
(Unchanged from v1.62)
Viking Dynasty is a strategy game that blends the dynastic ambition and grand strategy of Crusader Kings with the tactical, real-time battles of Age of Empires II.
Players will manage a Viking dynasty, not just a single character. They will forge alliances, declare wars, and manage their growing family on a strategic world map (the Macro layer). When battles occur or raids are launched, the game will transition into a real-time strategy mission (the Micro layer). The bridge between these two layers is the player's persistent, grid-based Settlement, which they will build, upgrade, and defend.
The core tension is balancing the long-term needs of your dynasty (geopolitics, heirs) with the immediate, visceral needs of combat (resources, unit control), all while protecting your home from rival Jarls.
Target Audience: Players who enjoy deep strategic systems (e.g., Paradox titles) but also crave tactical, skill-based RTS combat (e.g., Age of Empires, Company of Heroes).
Genre: Grand Strategy / Real-Time Strategy (RTS) Hybrid.
Theme: Viking Age, focusing on the grit, ambition, and legacy of a Norse dynasty.
2. Core Gameplay Loop: The Three Layers
(Unchanged from v1.62)
The gameplay is built on three interconnected layers: the Macro (Dynasty), the Micro (RTS), and the Bridge (Settlement).
2.A. The Macro (Dynasty Layer)
This is the "Crusader Kings" layer. It is the top-level grand strategy map of Scandinavia and beyond.
Gameplay: Turn-based or pausable real-time.
Player Actions: Managing family and heirs, diplomacy with AI Jarls, managing traits and succession, triggering events, and directing armies on a geopolitical map.
Consequence: Declaring war on a rival Jarl (Macro) triggers an offensive "Micro" mission. A rival attacking the player triggers a defensive "Micro" mission.
2.B. The Micro (RTS Layer)
This is the "Age of Empires" layer. It is the real-time, grid-based combat mission.
Gameplay: Real-time strategy.
Player Actions: Commanding units, using special abilities, and achieving mission objectives (e.g., "Destroy the enemy's Great Hall," "Survive for 10 minutes").
Consequence: Winning a battle (Micro) results in loot and prestige (Macro). Losing a defensive battle (Micro) results in your Settlement being "Sacked" (Bridge).
2.C. The Bridge (Settlement Layer)
This is the player's persistent home base, which connects the two layers.
Gameplay: Grid-based city-builder (e.g., RimWorld, Stronghold).
Player Actions: Placing buildings, upgrading structures, assigning workers, and managing resources.
Consequence: The layout of your Settlement becomes the map for all defensive "Micro" missions. A well-designed base provides a massive tactical advantage.
3. Key Features
(Unchanged from v1.62) (This section will be expanded as we implement Phases 2-4)
4. Technical Stack & Philosophy
(Unchanged from v1.62)
Engine: Godot 4.4
Scripting: GDScript
Architecture:
Data-Driven: All game stats (unit HP, building cost, etc.) must be custom Resource files (.tres) to empower design and balancing without code changes.
Singleton (Autoload) Managers: Global systems (SettlementManager, EventBus) are implemented as Autoloads for easy access and clear separation of concerns.
Event Bus: All communication between major, decoupled systems (e.g., UI, AI, Game Loop) must go through the EventBus singleton. No direct references.
Finite State Machines (FSMs): All entities with 3+ states (like AI units) must use an FSM.
5. Art Style & Mood
(Unchanged from v1.62) (Placeholder section for future development)
6. Core Entities & Data Structures
6.A. Overview
(Unchanged from v1.62)
All game entities are defined by a Resource script (.gd) and then implemented as one or more .tres files.
6.B. BuildingData.gd (AMENDED)
Defines the stats for all static structures in the game.
Path: res://data/buildings/BuildingData.gd
Extends: Resource
class_name BuildingData
Key Properties:
@export var display_name: String  (e.g., "Stone Wall")
@export var scene_to_spawn: PackedScene  (The .tscn file to instance)
@export var icon: Texture2D  (For the build menu)
@export var build_cost: int
@export var max_health: int
@export var blocks_pathfinding: bool  (If true, updates the A* grid)
@export var grid_size: Vector2i  (Size in grid cells)
@export_group("Defensive Stats")
@export var is_defensive_structure: bool
@export var attack_damage: int
@export var attack_range: float
@export var attack_speed: float


6.C. UnitData.gd (AMENDED)
Defines the stats for all mobile units in the game.
Path: res://data/units/UnitData.gd
Extends: Resource
class_name UnitData
Key Properties:
@export var display_name: String  (e.g., "Viking Raider")
@export var scene_to_spawn: PackedScene
@export var icon: Texture2D  (For the training menu)
@export var spawn_cost: int
@export_group("Combat Stats")
@export var max_health: int
@export var move_speed: float
@export var attack_damage: int
@export var attack_range: float
@export var attack_speed: float


7. The "Defense-First" MVP
7.A. MVP Goals
(Unchanged from v1.62)
The only goal of this MVP is to prove the "Sacked" loop. This is a technical, defense-first prototype.
MVP Success Criteria: "A pre-spawned enemy unit must successfully navigate a player-built settlement, pathfind around the player's 'Wall', destroy the 'Great Hall', and trigger a 'Sacked' game-over state."
7.B. Feature Set
(Unchanged from v1.62) (This is the minimal feature set required to achieve the MVP goal)
Systems: SettlementManager, AStarGrid2D Pathfinding, EventBus, FSM.
Buildings (Data): "Great Hall" (Objective), "Stone Wall" (Obstacle).
Units (Data): "Viking Raider" (Enemy).
Scenes: SettlementBridge.tscn (The "Conductor" scene), DefensiveMicro.tscn (The "World" scene), Base_Building.tscn, Base_Unit.tscn.
Core Loop:
Game starts in SettlementBridge.tscn.
SettlementBridge.gd spawns the Great Hall and the Raider.
Player can click to place "Stone Wall" obstacles.
Raider AI paths around walls to the Great Hall.
Raider attacks and destroys the Hall.
Hall's destruction triggers a "SACKED" message on the UI.
7.C. Core Architecture (Phase 2 Specification)
This section defines the target architecture for the Phase 2 economic systems. This design refactors the Phase 1 SettlementManager to support scalability and the new data requirements.
The monolithic SettlementManager will be split into two distinct parts:
Persistent Data Resource (SettlementData.gd): This new Resource script will hold all persistent settlement data, including:
treasury (Dictionary)
placed_buildings (Array)
last_visited_timestamp (int) A .tres file (e.g., home_base.tres) will represent a unique, persistent settlement.
Singleton Manager (SettlementManager.gd): The Autoload will be refactored into a runtime manager. Its new responsibilities are to:
Load a SettlementData resource on demand.
Manage the AStarGrid2D and pathfinding.
Process runtime requests (e.g., attempt_purchase, calculate_chunk_payout).
It will no longer hold any persistent data itself.
Data-Driven: BuildingData.gd and UnitData.gd will be expanded by EconomicBuildingData.gd.
AI: UnitFSM.gd and EventBus signals remain the core of unit AI.
8. Post-MVP Roadmap
Phase 2: The "Reinvestment" Economy (The 'Bridge')
Overview
This phase implements the core economic engine of the "Bridge" (Settlement) layer. This is not a traditional passive-income RTS economy (like Age of Empires).
The design is a hybrid "Raid-and-Spend" model. This keeps the player's focus on the active, core fantasy of Viking raiding, while supplementing it with strategic, long-term investments in their home base.
Pillar 1: The 'Treasury' & 'Storefront'
This pillar involves tracking player resources (Gold, Wood, Stone, etc.) in a persistent Treasury and creating a 'Storefront' UI where those resources can be spent on new buildings and units.
Build Cost Data Structure To support the multi-resource "Raid-and-Spend" economy, all buildable items, units, and upgrades will have their costs defined as a Dictionary data structure. This allows any item to cost one or more resource types.
Example (Defensive):
Stone Wall Cost: {"stone": 25}
Example (Economic):
Lumber Yard Cost: {"wood": 50, "gold": 10}
Example (Unit):
Viking Raider Cost: {"food": 50, "gold": 20}


Pillar 2: The 'Active' Loop (Raiding for Loot)
This is the primary source of all income in the game.
Concept: This system is the "generator" for the entire economy. It directly connects to the Phase 3 (Offensive Raids) RTS loop.
Function: Upon successfully completing an "Offensive Raid" mission, the player will be awarded a lump sum of Loot based on their performance. When the player returns to the "Bridge" scene, this loot is deposited directly into the "Treasury."
Pillar 3: The 'Reinvestment' Loop (Investing for Growth)
This is the secondary economic loop, providing strategic depth and a long-term progression path.
Concept: Players can spend loot from the Treasury to build or upgrade "Economic Buildings" (e.g., Farm Upgrade, Trading Post, Lumber Yard). This represents a long-term investment in the settlement's infrastructure.
Function (The "Chunk" Payout): These buildings do not generate resources passively in real-time. Instead, they accumulate a "chunk" of their given resource while the player is away (e.g., on a raid or offline).
Payout Mechanism: Upon returning to the "Bridge" scene, a function will calculate the total accumulated resources from all economic buildings (up to a defined 'storage cap' for each) and present it to the player as a "Welcome Home" reward. This simulates the "harvest" or "trade profits" that occurred during their absence. The player must click the "Collect" button on the modal. This action will deposit the resources into the Treasury and update the UI, providing a tangible, player-driven feedback loop for their investment.
Strategic Layer: This creates the central economic choice for the player:
Spend Loot: On immediate military power (e.t., better troops for the next raid).
Invest Loot: On economic buildings for long-term, compounding resource growth.
Pillar 4: Core Architectural Refactor (To Support Colonization)
To support the long-term vision of founding new colonies (as discussed in Section 7.C), the SettlementManager Singleton must be refactored before this phase is implemented.
Task: The SettlementManager AutoLoad will be replaced by a Resource-based system.
New Structure:
Create a new custom Resource named SettlementData.gd.
This script will hold all data for a single settlement: its settlement_grid, building_status, treasury, and economic_building_levels.
Benefit: The "Home Base" (home_base.tres) and any future "Colonies" (colony_1.tres) will simply be different resource files loaded by the same SettlementBridge.tscn scene. This makes expansion infinitely scalable.
Phase 3: The "Offensive Raid" Mission Type
Goal: To implement the player-driven "Micro" RTS loop.
Key Features:
Player Unit Spawning: Logic to spend resources to spawn player-controlled units.
Basic Unit Control: A simple "RTS-style" control script (select units, right-click to move/attack).
"Offensive Raid" Mission Loader: A system to load an "enemy" settlement map and spawn pre-defined enemy units.
Why second? This re-uses all the combat and A* tech from the MVP but gives the player agency. It directly connects the economy (Phase 2) to combat (Phase 3).
Phase 4: Integrate the "Macro" (The Dynasty Layer)
Goal: To build the "Crusader Kings" DNA that connects all the loops into a single, compelling narrative.
Key Features:
Dynasty & Trait System: Implement the family tree, character inheritance, and traits.
Geopolitical Map: Build the high-level map where the player interacts with other AI Jarls.
Event Triggers: A rival Jarl declaring war (Macro) will trigger the "Sacked" defensive loop (Micro). The player deciding to attack (Macro) will trigger the "Offensive Raid" loop (Micro).
Why last? This system provides the ultimate context, but it relies on the other two pillars (Economy and Combat) to have meaningful consequences.
