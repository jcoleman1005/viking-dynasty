### **1. Project Context Specification**

You will be provided with a comprehensive dump of the Godot project context, structured as follows. You must parse, understand, and use this context to inform all your responses.

*   **`2. GDD`**: The Game Design Document.
*   **`3. DevLog`**: A log of implemented features and changes.
*   **`4. Project Context`**: The technical project dump, including:
	*   `4.1. Project Settings`
	*   `4.2. Resource Files`
	*   `4.3. Scene Structures`
	*   `4.4. Codebase`

---
### **2. GDD**

GDD v1.74
Viking Dynasty
1. High-Level Concept & Vision
Viking Dynasty is a strategy game that blends the dynastic ambition and grand strategy of Crusader Kings with the tactical, real-time battles of Age of Empires II.
Players will manage a Viking dynasty, not just a single character. They will forge alliances, declare wars, and manage their growing family on a strategic world map (the Macro layer). When battles occur or raids are launched, the game will transition into a real-time strategy mission (the Micro layer). The bridge between these two layers is the player's persistent, grid-based Settlement, which they will build, upgrade, and defend.
The core tension is balancing the long-term needs of your dynasty (geopolitics, heirs) with the immediate, visceral needs of combat (resources, unit control), all while protecting your home from rival Jarls.
Target Audience: Players who enjoy deep strategic systems (e.g., Paradox titles) but also crave tactical, skill-based RTS combat (e.g., Age of Empires, Company of Heroes).
Genre: Grand Strategy / Real-Time Strategy (RTS) Hybrid.
Theme: Viking Age, focusing on the grit, ambition, and legacy of a Norse dynasty.
2. Core Gameplay Loop: The Three Layers
The gameplay is built on three interconnected layers: the Macro (Dynasty), the Micro (RTS), and the Bridge (Settlement).
2.A. The Macro (Dynasty Layer)
This is the "Crusader Kings" layer. It is the top-level grand strategy map of Scandinavia and beyond.
Gameplay: Turn-based or pausable real-time.
Player Actions: Managing family and heirs, diplomacy with AI Jarls, managing traits and succession, triggering events, and directing armies on a geopolitical map.
Consequence: Declaring war on a rival Jarl (Macro) triggers an offensive "Micro" mission. A rival attacking the player triggers a defensive "Micro" mission.
2.B. The Micro (RTS Layer)
This is the "Age of Empires" layer. It is the real-time, grid-based combat mission.
Gameplay: Real-time strategy.
Player Actions: Commanding units, using special abilities, and achieving mission objectives (e.g., "Destroy the enemy's Great Hall," "Survive for 10 minutes").
Consequence: Winning a battle (Micro) results in loot and prestige (Macro). Losing a defensive battle (Micro) results in your Settlement being "Sacked" (Bridge).
2.C. The Bridge (Settlement Layer)
This is the player's persistent home base, which connects the two layers.
Gameplay: Grid-based city-builder (e.g., RimWorld, Stronghold).
Player Actions: Placing buildings, upgrading structures, assigning workers, and managing resources.
Consequence: The layout of your Settlement becomes the map for all defensive "Micro" missions. A well-designed base provides a massive tactical advantage.
3. Key Features
(This section will be expanded as we implement Phases 3-4)
4. Technical Stack & Philosophy
Engine: Godot 4.4
Scripting: GDScript
Architecture:
Data-Driven: All game stats (unit HP, building cost, etc.) must be custom Resource files (.tres) to empower design and balancing without code changes.
Singleton (Autoload) Managers: Global systems (EventBus, SettlementManager) are implemented as Autoloads for easy access and clear separation of concerns.
Event Bus: All communication between major, decoupled systems (e.g., UI, AI, Game Loop) must go through the EventBus singleton. No direct references.
Finite State Machines (FSMs): All entities with 3+ states (like AI units) must use an FSM.
5. Art Style & Mood
(Placeholder section for future development)
6. Core Entities & Data Structures
6.A. Overview
All game entities are defined by a Resource script (.gd) and then implemented as one or more .tres files.
6.B. BuildingData.gd (AMENDED)
Defines the stats for all static structures in the game.
Path: res://data/buildings/BuildingData.gd
Extends: Resource
class_name BuildingData
Key Properties:
@export var display_name: String  (e.g., "Stone Wall")
@export var scene_to_spawn: PackedScene  (The .tscn file to instance)
@export var icon: Texture2D  (For the build menu)
@export var build_cost: Dictionary  (e.g., {"stone": 25})
@export var max_health: int
@export var blocks_pathfinding: bool  (If true, updates the A* grid)
@export var grid_size: Vector2i  (Size in grid cells)
@export_group("Defensive Stats")
@export var is_defensive_structure: bool
@export var attack_damage: int
@export var attack_range: float
@export var attack_speed: float

6.C. UnitData.gd (AMENDED)
Defines the stats for all mobile units in the game.
Path: res://data/units/UnitData.gd
Extends: Resource
class_name UnitData
Key Properties:
@export var display_name: String  (e.g., "Viking Raider")
@export var scene_to_spawn: PackedScene
@export var icon: Texture2D  (For the training menu)
@export var spawn_cost: Dictionary (e.g., {"food": 50, "gold": 20})
@export_group("Combat Stats")
@export var max_health: int
@export var move_speed: float
@export var attack_damage: int
@export var attack_range: float
@export var attack_speed: float

6.D. EconomicBuildingData.gd (NEW)
Extends BuildingData with properties for resource generation.
Path: res://data/buildings/EconomicBuildingData.gd
Extends: BuildingData
class_name EconomicBuildingData
Key Properties:
@export_group("Economic Stats")
## The type of resource this building generates (e.g., "wood", "food", "gold").
@export var resource_type: String = "wood"


## The fixed amount of resources generated after each successful attack.
@export var fixed_payout_amount: int = 10


## The maximum amount of the resource that can be stored before collection.
@export var storage_cap: int = 100

6.E. SettlementData.gd (NEW)
A Resource file that holds all persistent data for a single settlement. This allows for scalability (e.g., multiple colonies).
Path: res://data/settlements/SettlementData.gd
Extends: Resource
class_name SettlementData
Key Properties:
## Stores current "Loot" resources (e.g., {"gold": 1000, "wood": 500})
@export var treasury: Dictionary


## Stores all placed buildings for persistence.
## Array of Dictionaries: [{"resource_path": "res://...", "grid_position": Vector2i(x, y)}]
@export var placed_buildings: Array[Dictionary]

7. Core Implemented Systems
This section describes the major gameplay loops and architectural patterns that are currently implemented and functional in the game.
7.A. "Sacked" Loop (Defense-First)
The "Defense-First" MVP loop is complete and functional.
Systems: SettlementManager, AStarGrid2D Pathfinding, EventBus, FSM.
Core Loop:
SettlementBridge.gd loads home_base.tres (a SettlementData resource).
SettlementManager.load_settlement() reads this data, instantiates the "Great Hall" and any other saved buildings, and configures the AStarGrid2D.
Player can place "Stone Wall" obstacles.
Player clicks "Start Attack," which spawns an enemy "Viking Raider".
Raider AI (UnitFSM) paths around walls to the Great Hall.
Raider attacks and destroys the Hall.
Hall's building_destroyed signal is caught by SettlementBridge.gd.
UI shows "SACKED" message and a RestartButton.
7.B. Core Architecture (Refactored)
This section defines the current architecture after the Phase 2 refactor, which supports the economy and future scalability. The monolithic SettlementManager has been split.
Persistent Data Resource (SettlementData.gd)
This is a Resource script (.gd) that holds all persistent data for one settlement.
A .tres file (e.g., home_base.tres) represents a unique, saveable settlement.
It is responsible for storing:
treasury: Dictionary (e.g., {"gold": 1000, "wood": 10})
placed_buildings: Array[Dictionary]
Singleton Runtime Manager (SettlementManager.gd)
This is the Autoload singleton. It is a runtime manager and holds no persistent data itself.
Responsibilities:
Load/Save: Loads a SettlementData resource (e.g., load_settlement(home_base_data)) and saves it (save_settlement()).
Pathfinding: Manages the global AStarGrid2D and provides get_astar_path().
Runtime Logic: Processes runtime requests (e.g., attempt_purchase, calculate_payout).
Scene Management: Holds the BuildingContainer node to parent all instanced buildings.
Conductor Scene (SettlementBridge.gd)
This is the main "Conductor" scene.
Responsibilities:
Telling SettlementManager which settlement to load.
Managing the UI layer (Storefront, Payout Popup).
Spawning units (both enemy Raiders for defense and player units for offense).
Connecting signals (e.g., great_hall.building_destroyed).
7.C. "Reinvestment" Economy (Phase 2)
This implements the core "Raid-and-Spend" economic engine.
Pillar 1: The 'Treasury' & 'Storefront' (Implemented)
Treasury: The treasury Dictionary in SettlementData.gd tracks all "Loot" resources (Gold, Wood, Stone, etc.).
Storefront: Storefront_UI.tscn allows the player to spend Treasury resources.
Build Cost: All buildable items (buildings, units) have their cost defined as a Dictionary in their data resource (e.g., build_cost = {"stone": 25} or spawn_cost = {"food": 50, "gold": 10}). SettlementManager.attempt_purchase() handles this logic.
Pillar 2: The 'Active' Loop (Raiding for Loot) (Partial)
Concept: This is the primary income generator, designed to connect to the Phase 3 (Offensive Raids) loop.
Function: Upon completing an "Offensive Raid" (Phase 3), the player will be awarded a lump sum of Loot. For now, this is simulated with a debug key.
Pillar 3: The 'Reinvestment' Loop (Implemented)
Concept: This is the secondary economic loop. Players spend loot on "Economic Buildings" (e.g., LumberYard.tres) as a long-term investment.
Function (The "Fixed" Payout): These buildings do not generate resources passively over time. Instead, they provide a fixed, lump-sum resource payout after each attack mission. This "one attack = one payout" model respects the player's effort and is highly predictable.
Payout Mechanism:
The player returns to the SettlementBridge scene (simulating a return from a raid).
SettlementBridge.gd calls SettlementManager.calculate_payout().
This function iterates all EconomicBuildingData buildings owned by the player and sums their fixed_payout_amount property.
The total payout is displayed on the WelcomeHome_Popup.tscn.
The player must click "Collect" to deposit the resources into the Treasury, providing a tangible feedback loop.
Strategic Layer: This creates the central economic choice:
Spend Loot: On immediate military power (e.g., better troops for the next raid).
Invest Loot: On economic buildings for long-term, compounding resource growth.
8. Development Roadmap
This section outlines the next major phases of development, building upon the implemented systems.
8.A. Phase 3: The "Offensive Raid" Mission Type (Next)
Goal: To implement the player-driven "Micro" RTS loop.
Key Features:
Player Unit Spawning: Logic in the Storefront UI to spend Treasury resources (spawn_cost) to train player-controlled units.
Basic Unit Control: A simple "RTS-style" control script (select units, right-click to move/attack).
"Offensive Raid" Mission Loader: A system to load an "enemy" settlement map (a different SettlementData.tres file) and spawn pre-defined enemy units.
Why next? This re-uses all combat/A* tech, gives the player agency, and fully connects the "Active Loop" (Pillar 2) by providing the "Loot" that powers the entire economy.
8.B. Phase 4: Integrate the "Macro" (The Dynasty Layer) (Future)
Goal: To build the "Crusader Kings" DNA that connects all the loops into a single, compelling narrative.
Key Features:
Dynasty & Trait System: Implement the family tree, character inheritance, and traits.
Geopolitical Map: Build the high-level map where the player interacts with other AI Jarls.
Event Triggers: A rival Jarl declaring war (Macro) will trigger the "Sacked" defensive loop (Micro). The player deciding to attack (Macro) will trigger the "Offensive Raid" loop (Micro).
Why last? This system provides the ultimate context, but it relies on the other two pillars (Economy and Combat) to have meaningful consequences.



---
### **3. DevLog**

Devlog Update: Pivoting to a More Robust Economic Loop

This week saw a major refinement to our core economic loop. After prototyping an initial time-based system, we made a key strategic decision to pivot to a simpler, more predictable, and more balanced fixed-payout model. This new system feels more satisfying for the player and provides a much stronger foundation for future development.

Key Insight: From Time-Based to Action-Based Rewards
*   Initial Prototype: We successfully implemented a full, time-based resource generation system. This prototype was crucial for testing our data persistence and UI flow.
*   Design Realization: Through testing, we identified that time-based rewards, while realistic, could feel unpredictable and create balancing challenges. It also less directly rewarded the player's core action of completing an attack.
*   💡 The Pivot (Design Choice): We made the call to switch to a fixed-payout system. This decision ties the reward directly to the gameplay loop: one attack equals one payout. This model is more "gamey," respects the player's effort, and gives them a clear understanding of the value of their economic buildings.

---

Core Achievements & Current Features

*   ✅ Rock-Solid Persistence
*   Player purchases of economic buildings like the Lumber Yard are saved instantly and permanently to a .tres resource file. What you build stays built.

*   ✅ Predictable, Fixed Payouts
*   A new fixedpayoutamount property has been added to all economic buildings.
*   Returning to the settlement after an attack now triggers a clean calculate_payout() function.

*   ✅ Simple & Scalable Logic
*   The payout is now a simple sum of the fixedpayoutamount from all owned economic buildings.
*   Example: Owning two Lumber Yards (at 10 Wood each) results in a guaranteed "Wood: 20" payout after every attack.

*   ✅ Full UI Integration
*   The "Welcome Home" popup correctly displays the calculated fixed payout.
*   The "Collect" button works perfectly, transferring the generated resources to the player's main treasury and updating the UI.

*   ✅ Streamlined & Cleaned Codebase
*   As a result of the pivot, the entire economic codebase has been simplified.
*   All complex timestamp-tracking logic, variables, and debug functions have been completely removed, making the system much easier to maintain and expand upon.

---
### **4. Project Context**

#### **4.1. Project Settings**

--- START OF PROJECT SETTINGS ---
; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=5

[application]

config/name="Viking Dynasty"
run/main_scene="uid://c53k15q2w8c1a"
config/features=PackedStringArray("4.5", "GL Compatibility")

[autoload]

EventBus="*res://autoload/EventBus.gd"
SettlementManager="*res://autoload/SettlementManager.tscn"

[editor_plugins]

enabled=PackedStringArray("res://addons/GodotAiSuite/plugin.cfg")

[input]

debug_time_travel="{\"deadzone\": 0.5, \"events\": [{\"physical_keycode\": 84, \"type\": \"key\"}]}"
--- END OF PROJECT SETTINGS ---

#### **4.2. Resource Files**

--- START OF RESOURCE FILES ---
--- RESOURCE: res://.ai-checkpoints/placeholder_tile.tres ---
[gd_resource type="NoiseTexture2D" load_steps=2 format=3 uid="uid://c6v2d1q8q7e3j"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_cemhj"]
noise_type = 2
frequency = 0.1153

[resource]
width = 32
height = 32
noise = SubResource("FastNoiseLite_cemhj")

--- RESOURCE: res://data/buildings/Bldg_GreatHall.tres ---
[gd_resource type="Resource" script_class="BuildingData" load_steps=3 format=3 uid="uid://bs1e1mgqnldwq"]

[ext_resource type="Script" uid="uid://js4bbqgeyd6c" path="res://data/buildings/BuildingData.gd" id="1_i2pmy"]
[ext_resource type="PackedScene" uid="uid://cws6xle5x52g4" path="res://scenes/buildings/Base_Building.tscn" id="2_hptna"]

[resource]
script = ExtResource("1_i2pmy")
display_name = "Great Hall"
scene_to_spawn = ExtResource("2_hptna")
build_cost = {
"gold": 100,
"wood": 250
}
max_health = 50
grid_size = Vector2i(3, 2)

--- RESOURCE: res://data/buildings/Bldg_Wall.tres ---
[gd_resource type="Resource" script_class="BuildingData" load_steps=3 format=3 uid="uid://b2356vlfukf14"]

[ext_resource type="Script" uid="uid://js4bbqgeyd6c" path="res://data/buildings/BuildingData.gd" id="1_t76rl"]
[ext_resource type="PackedScene" uid="uid://cws6xle5x52g4" path="res://scenes/buildings/Base_Building.tscn" id="1_vluf5"]

[resource]
script = ExtResource("1_t76rl")
display_name = "Stone Wall"
scene_to_spawn = ExtResource("1_vluf5")
build_cost = {
"stone": 25
}
attack_damage = 0
attack_range = 0.0
attack_speed = 0.0

--- RESOURCE: res://data/buildings/LumberYard.tres ---
[gd_resource type="Resource" script_class="EconomicBuildingData" load_steps=3 format=3 uid="uid://drx4sih8numo1"]

[ext_resource type="Script" uid="uid://d33smw07vm6y4" path="res://data/buildings/EconomicBuildingData.gd" id="1_abcde"]
[ext_resource type="PackedScene" uid="uid://cws6xle5x52g4" path="res://scenes/buildings/Base_Building.tscn" id="2_fghij"]

[resource]
script = ExtResource("1_abcde")
display_name = "Lumber Yard"
scene_to_spawn = ExtResource("2_fghij")
build_cost = {
"wood": 50
}
max_health = 75
grid_size = Vector2i(2, 2)

--- RESOURCE: res://data/settlements/home_base.tres ---
[gd_resource type="Resource" script_class="SettlementData" load_steps=2 format=3 uid="uid://c614q14udkh33"]

[ext_resource type="Script" uid="uid://hlb8s5g0yp6k" path="res://data/settlements/SettlementData.gd" id="1_abcde"]

[resource]
script = ExtResource("1_abcde")
treasury = {
"food": 325,
"gold": 1000,
"stone": 700,
"wood": 10
}
placed_buildings = Array[Dictionary]([{
"grid_position": Vector2i(25, 15),
"resource_path": "res://data/buildings/Bldg_GreatHall.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/Bldg_Wall.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/Bldg_Wall.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/Bldg_Wall.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}, {
"grid_position": Vector2i(10, 15),
"resource_path": "res://data/buildings/LumberYard.tres"
}])

--- RESOURCE: res://data/units/Unit_Raider.tres ---
[gd_resource type="Resource" script_class="UnitData" load_steps=2 format=3 uid="uid://brnbvjwnoyh3j"]

[ext_resource type="Script" uid="uid://cq155t20ujb2j" path="res://data/units/UnitData.gd" id="1_tcvvg"]

[resource]
script = ExtResource("1_tcvvg")
display_name = "Viking Raider"
attack_range = 50.0
metadata/_custom_type_script = "uid://cq155t20ujb2j"

--- RESOURCE: res://placeholder_tile.tres ---
[gd_resource type="NoiseTexture2D" load_steps=2 format=3 uid="uid://c6v2d1q8q7e3j"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_cemhj"]
noise_type = 2
frequency = 0.1153

[resource]
width = 32
height = 32
noise = SubResource("FastNoiseLite_cemhj")
--- END OF RESOURCE FILES ---

#### **4.3. Scene Structures**

--- START OF SCENE STRUCTURES ---
--- SCENE: res://.ai-checkpoints/main_test.tscn ---
Main Test (Node2D)
> scene: res://.ai-checkpoints/main_test.tscn

--- SCENE: res://autoload/SettlementManager.tscn ---
SettlementManager (Node)
> script: res://autoload/SettlementManager.gd
> scene: res://autoload/SettlementManager.tscn
> BuildingContainer (Node2D)

--- SCENE: res://main_test.tscn ---
Main Test (Node2D)
> scene: res://main_test.tscn

--- SCENE: res://scenes/buildings/Base_Building.tscn ---
Base_Building (StaticBody2D)
> script: res://data/buildings/Base_Building.gd
> scene: res://scenes/buildings/Base_Building.tscn
> Sprite2D (Sprite2D)
> > texture = res://placeholder_tile.tres
> CollisionShape2D (CollisionShape2D)
> > shape = res://scenes/buildings/Base_Building.tscn::RectangleShape2D_b5w0v

--- SCENE: res://scenes/levels/DefensiveMicro.tscn ---
DefensiveMicro (Node2D)
> scene: res://scenes/levels/DefensiveMicro.tscn
> TileMap (TileMap)
> > tile_set = res://scenes/levels/DefensiveMicro.tscn::TileSet_m5xuc

--- SCENE: res://scenes/levels/SettlementBridge.tscn ---
SettlementBridge (Node)
> script: res://scripts/buildings/SettlementBridge.gd
> scene: res://scenes/levels/SettlementBridge.tscn
> DefensiveMicro (Node2D)
>   scene: res://scenes/levels/DefensiveMicro.tscn
>   TileMap (TileMap)
>   > tile_set = res://scenes/levels/DefensiveMicro.tscn::TileSet_m5xuc
> UnitContainer (Node2D)
> UI (CanvasLayer)
>   Label (Label)
>   > anchors_preset = -1
>   > offset_left = 19.0
>   > offset_top = 16.0
>   > offset_right = 328.0
>   > offset_bottom = 39.0
>   > text = "Click to build a Wall. Defend the Great Hall!"
>   Storefront_UI (Control)
>     script: res://ui/StorefrontUI.gd
>     scene: res://ui/Storefront_UI.tscn
>     PanelContainer (PanelContainer)
>     > layout_mode = 1
>     > anchors_preset = -1
>     > offset_right = 400.0
>     > offset_bottom = 100.0
>       MarginContainer (MarginContainer)
>       > layout_mode = 2
>         VBoxContainer (VBoxContainer)
>         > layout_mode = 2
>           TreasuryDisplay (HBoxContainer)
>           > layout_mode = 2
>             GoldLabel (Label)
>             > layout_mode = 2
>             > text = "Gold: 0"
>             WoodLabel (Label)
>             > layout_mode = 2
>             > text = "Wood: 0"
>             FoodLabel (Label)
>             > layout_mode = 2
>             > text = "Food: 0"
>             StoneLabel (Label)
>             > layout_mode = 2
>             > text = "Stone: 0"
>           BuildButtons (HBoxContainer)
>           > layout_mode = 2
>             BuyWallButton (Button)
>             > layout_mode = 2
>             > text = "Buy Wall (25 Stone)"
>             BuyLumberYardButton (Button)
>             > layout_mode = 2
>             > text = "Buy Lumber Yard (50 Wood)"
>             @Button@30913 (Button)
>             > layout_mode = 2
>             @Button@31566 (Button)
>             > layout_mode = 2
>   RestartButton (Button)
>   > visible = false
>   > anchors_preset = -1
>   > anchor_left = 0.5
>   > anchor_top = 0.5
>   > anchor_right = 0.5
>   > anchor_bottom = 0.5
>   > offset_left = -84.0
>   > offset_top = -15.5
>   > offset_right = 84.0
>   > offset_bottom = 15.5
>   > grow_horizontal = 2
>   > grow_vertical = 2
>   > text = "Return to Settlement"
>   StartAttackButton (Button)
>   > anchors_preset = -1
>   > anchor_left = 1.0
>   > anchor_right = 1.0
>   > offset_left = -110.0
>   > offset_right = -10.0
>   > offset_bottom = 31.0
>   > grow_horizontal = 0
>   > text = "Start Attack"

--- SCENE: res://scenes/units/Base_Unit.tscn ---
Base_Unit (CharacterBody2D)
> script: res://scripts/units/Base_Unit.gd
> scene: res://scenes/units/Base_Unit.tscn
> Sprite2D (Sprite2D)
> > texture = res://placeholder_tile.tres
> CollisionShape2D (CollisionShape2D)
> > shape = res://scenes/units/Base_Unit.tscn::RectangleShape2D_n6s0a
> AttackTimer (Timer)

--- SCENE: res://scenes/units/VikingRaider.tscn ---
VikingRaider (CharacterBody2D)
> script: res://scripts/units/VikingRaider.gd
> scene: res://scenes/units/VikingRaider.tscn
> data = res://data/units/Unit_Raider.tres
> Sprite2D (Sprite2D)
> > texture = res://placeholder_tile.tres
> CollisionShape2D (CollisionShape2D)
> > shape = res://scenes/units/Base_Unit.tscn::RectangleShape2D_n6s0a
> AttackTimer (Timer)

--- SCENE: res://ui/Storefront_UI.tscn ---
Main (Control)
> script: res://ui/StorefrontUI.gd
> scene: res://ui/Storefront_UI.tscn
> PanelContainer (PanelContainer)
> > layout_mode = 1
> > anchors_preset = -1
> > offset_right = 400.0
> > offset_bottom = 100.0
>   MarginContainer (MarginContainer)
>   > layout_mode = 2
>     VBoxContainer (VBoxContainer)
>     > layout_mode = 2
>       TreasuryDisplay (HBoxContainer)
>       > layout_mode = 2
>         GoldLabel (Label)
>         > layout_mode = 2
>         > text = "Gold: 0"
>         WoodLabel (Label)
>         > layout_mode = 2
>         > text = "Wood: 0"
>         FoodLabel (Label)
>         > layout_mode = 2
>         > text = "Food: 0"
>         StoneLabel (Label)
>         > layout_mode = 2
>         > text = "Stone: 0"
>       BuildButtons (HBoxContainer)
>       > layout_mode = 2
>         BuyWallButton (Button)
>         > layout_mode = 2
>         > text = "Buy Wall (25 Stone)"
>         BuyLumberYardButton (Button)
>         > layout_mode = 2
>         > text = "Buy Lumber Yard (50 Wood)"
>         @Button@30913 (Button)
>         > layout_mode = 2
>         @Button@31566 (Button)
>         > layout_mode = 2

--- SCENE: res://ui/WelcomeHome_Popup.tscn ---
Main (PanelContainer)
> script: res://ui/WelcomeHomePopup.gd
> scene: res://ui/WelcomeHome_Popup.tscn
> anchor_left = 0.5
> anchor_top = 0.5
> anchor_right = 0.5
> anchor_bottom = 0.5
> offset_left = -2.0
> offset_top = -15.5
> offset_right = 2.0
> offset_bottom = 15.5
> size_flags_horizontal = 4
> size_flags_vertical = 4
> MarginContainer (MarginContainer)
> > layout_mode = 2
>   VBoxContainer (VBoxContainer)
>   > layout_mode = 2
>     PayoutLabel (Label)
>     > layout_mode = 2
>     > text = "Welcome home! ..."
>     CollectButton (Button)
>     > layout_mode = 2
>     > text = "Collect"
--- END OF SCENE STRUCTURES ---

#### **4.4. Codebase**

--- START OF CODEBASE ---
--- SCRIPT: res://autoload/EventBus.gd ---
# res://autoload/EventBus.gd
#
# A global Singleton (Autoload) that acts as a central "switchboard"
# for decoupled signal communication between major systems.


extends Node

# --- Build System Signals ---
signal build_request_made(building_data: BuildingData, grid_position: Vector2i)

# --- Pathfinding Signals ---
signal pathfinding_grid_updated(grid_position: Vector2i)

# --- Treasury & Economy Signals (Phase 2) ---
signal treasury_updated(new_treasury: Dictionary)
signal purchase_successful(item_name: String)
signal purchase_failed(reason: String)

--- SCRIPT: res://autoload/SettlementManager.gd ---
# res://autoload/SettlementManager.gd

extends Node

var current_settlement: SettlementData
var astar_grid: AStarGrid2D
@onready var building_container: Node2D = $BuildingContainer

const TILE_SIZE: int = 32
const GRID_WIDTH: int = 50
const GRID_HEIGHT: int = 30

func _initialize_grid() -> void:
	astar_grid = AStarGrid2D.new()
	var playable_rect := Rect2i(0, 0, GRID_WIDTH, GRID_HEIGHT)
	astar_grid.region = playable_rect
	astar_grid.cell_size = Vector2(TILE_SIZE, TILE_SIZE)
	astar_grid.diagonal_mode = AStarGrid2D.DIAGONAL_MODE_NEVER
	astar_grid.update()
	print("Settlement Grid Initialized.")

func load_settlement(data: SettlementData) -> void:
	if not data:
		push_error("SettlementManager: load_settlement called with null data.")
		return
	
	current_settlement = data
	_initialize_grid()
	
	for child in building_container.get_children():
		child.queue_free()

	for building_entry in current_settlement.placed_buildings:
		var building_res_path: String = building_entry["resource_path"]
		var grid_pos: Vector2i = building_entry["grid_position"]
		
		var building_data: BuildingData = load(building_res_path)
		if building_data:
			place_building(building_data, grid_pos)
		else:
			push_error("Failed to load building resource from path: %s" % building_res_path)
	
	print("Settlement loaded with %d buildings." % building_container.get_child_count())

func place_building(building_data: BuildingData, grid_position: Vector2i) -> BaseBuilding:
	if not building_data or not building_data.scene_to_spawn:
		push_error("Build request failed: BuildingData or scene_to_spawn is null.")
		return null
	
	var new_building: BaseBuilding = building_data.scene_to_spawn.instantiate()
	new_building.data = building_data
	
	var world_pos_top_left: Vector2 = Vector2(grid_position) * astar_grid.cell_size
	var half_cell_offset: Vector2 = astar_grid.cell_size / 2.0
	new_building.global_position = world_pos_top_left + half_cell_offset
	
	building_container.add_child(new_building)
	
	if building_data.blocks_pathfinding:
		astar_grid.set_point_solid(grid_position, true)
		astar_grid.update()
		EventBus.pathfinding_grid_updated.emit(grid_position)
		
	return new_building

func deposit_loot(loot: Dictionary) -> void:
	if not current_settlement: return
	for resource_type in loot:
		if current_settlement.treasury.has(resource_type):
			# Payouts should respect the storage cap of the building that generated them,
			# but the main treasury can be considered unlimited for now.
			current_settlement.treasury[resource_type] += loot[resource_type]
		else:
			current_settlement.treasury[resource_type] = loot[resource_type]
	EventBus.treasury_updated.emit(current_settlement.treasury)
	print("Loot deposited. New treasury: %s" % current_settlement.treasury)

func attempt_purchase(item_cost: Dictionary) -> bool:
	if not current_settlement: return false
	
	for resource_type in item_cost:
		if not current_settlement.treasury.has(resource_type) or \
		current_settlement.treasury[resource_type] < item_cost[resource_type]:
			var reason = "Insufficient %s" % resource_type
			print("Purchase failed. %s." % reason)
			EventBus.purchase_failed.emit(reason)
			return false
			
	for resource_type in item_cost:
		current_settlement.treasury[resource_type] -= item_cost[resource_type]
	
	EventBus.treasury_updated.emit(current_settlement.treasury)
	EventBus.purchase_successful.emit("Unnamed Item") # Placeholder
	print("Purchase successful. New treasury: %s" % current_settlement.treasury)
	return true

func calculate_payout() -> Dictionary:
	if not current_settlement:
		return {}

	var total_payout: Dictionary = {}

	for building_entry in current_settlement.placed_buildings:
		var building_data: BuildingData = load(building_entry["resource_path"])
		if building_data is EconomicBuildingData:
			var eco_data: EconomicBuildingData = building_data
			var resource_type: String = eco_data.resource_type
			
			if not total_payout.has(resource_type):
				total_payout[resource_type] = 0
			
			# The payout is now a simple, fixed amount per building.
			# The storage_cap is now effectively the treasury cap, handled in deposit_loot.
			total_payout[resource_type] += eco_data.fixed_payout_amount

	if not total_payout.is_empty():
		print("Calculated fixed payout: %s" % total_payout)
	return total_payout

func get_astar_path(start_pos: Vector2, end_pos: Vector2) -> PackedVector2Array:
	if not astar_grid:
		push_error("AStarGrid is not initialized!")
		return PackedVector2Array()
	var start_id: Vector2i = Vector2i(start_pos / astar_grid.cell_size)
	var end_id: Vector2i = Vector2i(end_pos / astar_grid.cell_size)
	return astar_grid.get_point_path(start_id, end_id)

func save_settlement() -> void:
	if not current_settlement:
		push_error("Attempted to save a null settlement.")
		return
	
	if current_settlement.resource_path and not current_settlement.resource_path.is_empty():
		var error = ResourceSaver.save(current_settlement, current_settlement.resource_path)
		if error == OK:
			print("Settlement data saved successfully to: %s" % current_settlement.resource_path)
		else:
			push_error("Failed to save settlement data to path: %s. Error code: %s" % [current_settlement.resource_path, error])
	else:
		push_warning("SettlementData has no resource_path, cannot save settlement.")

--- SCRIPT: res://data/buildings/Base_Building.gd ---
# res://scenes/buildings/Base_Building.gd
#
# --- MODIFIED: Added 'building_destroyed' signal ---

class_name BaseBuilding
extends StaticBody2D

## This signal is emitted when health reaches zero.
## GDD Ref:
signal building_destroyed(building: BaseBuilding)

@export var data: BuildingData
var current_health: int = 100

func _ready() -> void:
	if not data:
		push_warning("BaseBuilding scene is missing its BuildingData resource.")
		return
	
	current_health = data.max_health

func take_damage(amount: int) -> void:
	current_health = max(0, current_health - amount)
	print("%s took %d damage, %d HP remaining." % [data.display_name, amount, current_health])
	
	if current_health == 0:
		die()

func die() -> void:
	print("%s has been destroyed." % data.display_name)
	
	# --- ADDED ---
	# Emit the signal *before* queue_free() so listeners
	# can react before the node is deleted.
	building_destroyed.emit(self)
	
	queue_free()

--- SCRIPT: res://data/buildings/BuildingData.gd ---
# res://data/buildings/BuildingData.gd
#
# Defines the core data for any building in the game.
#
# --- MODIFIED: Added 'class_name BuildingData' ---

class_name BuildingData
extends Resource

## The name displayed in the UI (e.g., "Stone Wall", "Watchtower").
@export var display_name: String = "New Building"

## The scene that will be instanced when this building is placed.
@export var scene_to_spawn: PackedScene

## The icon shown in the build menu.
@export var icon: Texture2D

## The cost in 'Resources' (e.g., wood, gold) to build this.
@export var build_cost: Dictionary

## The building's maximum hit points.
@export var max_health: int = 100

## If true, this building blocks enemy pathfinding.
@export var blocks_pathfinding: bool = true

## The size of the building on the AStarGrid2D.
@export var grid_size: Vector2i = Vector2i.ONE


@export_group("Defensive Stats")
## If true, this building can attack enemies (e.g., Watchtower).
@export var is_defensive_structure: bool = false

## Damage dealt per attack (if defensive).
@export var attack_damage: int = 5

## Range in pixels (if defensive).
@export var attack_range: float = 200.0

## Attacks per second (if defensive).
@export var attack_speed: float = 1.0

--- SCRIPT: res://data/buildings/EconomicBuildingData.gd ---
# res://data/buildings/EconomicBuildingData.gd
extends BuildingData
class_name EconomicBuildingData

@export_group("Economic Stats")
## The type of resource this building generates (e.g., "wood", "food", "gold").
@export var resource_type: String = "wood"

## The fixed amount of resources generated after each successful attack.
@export var fixed_payout_amount: int = 10

## The maximum amount of the resource that can be stored before collection.
@export var storage_cap: int = 100

--- SCRIPT: res://data/settlements/SettlementData.gd ---
extends Resource
class_name SettlementData

@export var treasury: Dictionary = {"gold": 0, "wood": 0, "food": 0, "stone": 0}

# Stores building data and position. Structure:
# {"resource_path": "res://...", "grid_position": Vector2i(x, y)}
@export var placed_buildings: Array[Dictionary] = []

--- SCRIPT: res://data/units/UnitData.gd ---
# res://data/units/UnitData.gd
#
# Defines the core data for any unit in the game.
# This resource is used by Base_Unit.tscn to configure instances.
# GDD Ref: 7.C.1.b

class_name UnitData
extends Resource

## The name displayed in the UI (e.g., "Viking Raider").
@export var display_name: String = "New Unit"

## The scene that will be instanced when this unit is spawned.
@export var scene_to_spawn: PackedScene

## The icon shown in the training menu.
@export var icon: Texture2D

## The cost in 'Resources' to train this unit.
@export var spawn_cost: int = 25


@export_group("Combat Stats")
## The unit's maximum hit points.
@export var max_health: int = 50

## Movement speed in pixels per second.
@export var move_speed: float = 75.0

## Damage dealt per attack.
@export var attack_damage: int = 8

## Range in pixels. (e.g., 10 for melee, 300 for archer).
@export var attack_range: float = 10.0

## Attacks per second.
@export var attack_speed: float = 1.2

--- SCRIPT: res://scripts/ai/UnitFSM.gd ---
# res://scripts/ai/UnitFSM.gd
#
# --- MODIFIED: _move_state now checks for attack range ---

class_name UnitFSM

enum State { IDLE, MOVE, ATTACK }

# Unit References
var unit: BaseUnit
var attack_timer: Timer

# State Data
var current_state: State = State.IDLE
var path: Array = []

# Target Data
var target_position: Vector2 = Vector2.ZERO
var target_node: BaseBuilding = null # The building we want to attack

func _init(p_unit: BaseUnit, p_timer: Timer) -> void:
	unit = p_unit
	attack_timer = p_timer
	
	# Connect the timer's timeout signal to our attack function
	attack_timer.timeout.connect(_on_attack_timer_timeout)

func change_state(new_state: State) -> void:
	if current_state == new_state:
		return
	
	_exit_state(current_state)
	current_state = new_state
	_enter_state(current_state)

func _enter_state(state: State) -> void:
	match state:
		State.MOVE:
			recalculate_path()
		
		State.ATTACK:
			print("%s entering ATTACK state." % unit.data.display_name)
			# Set timer wait time based on unit's attack speed
			attack_timer.wait_time = 1.0 / unit.data.attack_speed
			attack_timer.start()
			# Attack immediately on entering state
			_on_attack_timer_timeout()

func _exit_state(state: State) -> void:
	match state:
		State.MOVE:
			path.clear()
		State.ATTACK:
			attack_timer.stop()

func recalculate_path() -> void:
	path = SettlementManager.get_astar_path(unit.global_position, target_position)
	if path.is_empty():
		print("Raider at %s failed to find a path to %s." % [unit.global_position, target_position])
		# If we can't find a path, check if we're already at the target
		if unit.global_position.distance_to(target_position) < (unit.data.attack_range + 16):
			change_state(State.ATTACK)
		else:
			change_state(State.IDLE)
	else:
		print("Raider found new path. Waypoints: %d" % path.size())

func update(delta: float) -> void:
	match current_state:
		State.IDLE:
			_idle_state(delta)
		State.MOVE:
			_move_state(delta)
		State.ATTACK:
			_attack_state(delta)

# --- State Logic Functions ---

func _idle_state(_delta: float) -> void:
	pass

func _move_state(delta: float) -> void:
	# --- THIS IS THE FIX ---
	# First, check if we are in attack range of our target.
	# This is more important than finishing the path.
	if is_instance_valid(target_node) and \
	unit.global_position.distance_to(target_node.global_position) < unit.data.attack_range:
		print("Raider in range, switching to ATTACK.")
		change_state(State.ATTACK)
		return
	# --- END FIX ---
	
	# If we're not in range, check if our path is empty
	if path.is_empty():
		# Path is done, but we're still not in range?
		print("Raider path ended, but not in range. Idling.")
		change_state(State.IDLE)
		return
	
	# Path is not empty and we're not in range, so keep moving
	var next_waypoint: Vector2 = path[0]
	var direction: Vector2 = (next_waypoint - unit.global_position).normalized()
	var velocity: Vector2 = direction * unit.data.move_speed
	
	unit.velocity = velocity
	unit.move_and_slide()
	
	var arrival_radius: float = 8.0 
	if unit.global_position.distance_to(next_waypoint) < arrival_radius:
		path.pop_front()
		
		# If that was the last waypoint, check for target
		if path.is_empty():
			if is_instance_valid(target_node) and \
			unit.global_position.distance_to(target_node.global_position) < unit.data.attack_range:
				change_state(State.ATTACK)
			else:
				change_state(State.IDLE)
		
func _attack_state(_delta: float) -> void:
	if not is_instance_valid(target_node):
		print("%s target destroyed. Returning to IDLE." % unit.data.display_name)
		change_state(State.IDLE)
		return
	
	# Check if target moved out of range
	if unit.global_position.distance_to(target_node.global_position) > unit.data.attack_range + 16:
		print("%s target moved out of range. Re-engaging." % unit.data.display_name)
		target_position = target_position 
		change_state(State.MOVE)

# --- Signal Callback ---

func _on_attack_timer_timeout() -> void:
	"""
	This is called every time the AttackTimer finishes.
	"""
	if is_instance_valid(target_node):
		print("%s attacks %s!" % [unit.data.display_name, target_node.data.display_name])
		target_node.take_damage(unit.data.attack_damage)
	else:
		change_state(State.IDLE)

--- SCRIPT: res://scripts/buildings/SettlementBridge.gd ---
# res://scripts/buildings/SettlementBridge.gd

extends Node

# --- Preloaded Assets ---
var test_building_data: BuildingData = preload("res://data/buildings/Bldg_Wall.tres")
var raider_scene: PackedScene = preload("res://scenes/units/VikingRaider.tscn")
var home_base_data: SettlementData = preload("res://data/settlements/home_base.tres")
var welcome_popup_scene: PackedScene = preload("res://ui/WelcomeHome_Popup.tscn")

# --- Scene Node References ---
@onready var unit_container: Node2D = $UnitContainer
@onready var ui_layer: CanvasLayer = $UI
@onready var restart_button: Button = $UI/RestartButton
@onready var start_attack_button: Button = $UI/StartAttackButton
@onready var storefront_ui: Control = $UI/Storefront_UI
var welcome_popup: PanelContainer

# --- State Variables ---
var great_hall_instance: BaseBuilding = null
var game_is_over: bool = false
const RAIDER_SPAWN_POS: Vector2 = Vector2(50, 50)


func _ready() -> void:
	# --- Setup ---
	SettlementManager.load_settlement(home_base_data)
	_find_and_setup_great_hall()
	_instance_ui()
	
	# --- Connect Signals ---
	restart_button.pressed.connect(_on_restart_pressed)
	start_attack_button.pressed.connect(_on_start_attack_pressed)

	# --- Payout Logic ---
	# This now happens when the scene loads, simulating the return from an attack.
	var payout = SettlementManager.calculate_payout()
	if not payout.is_empty():
		welcome_popup.display_payout(payout)
		start_attack_button.disabled = true # Disable combat until payout is collected
		storefront_ui.hide()


func _input(event: InputEvent) -> void:
	# This runs BEFORE GUI input, so we can consume it.
	if event.is_action_pressed("ui_accept"):
		if game_is_over or welcome_popup.visible:
			return # Don't grant loot if game over screen or popup is visible
		
		var sample_loot = {"gold": 100, "wood": 50, "food": 25, "stone": 75}
		print("DEBUG: Granting sample loot via key press.")
		SettlementManager.deposit_loot(sample_loot)
		get_viewport().set_input_as_handled() # CRITICAL: Stop event from reaching buttons


func _unhandled_input(event: InputEvent) -> void:
	# This runs AFTER GUI input, so it's safe for non-UI actions like placing buildings.
	if game_is_over or welcome_popup.visible:
		return
		
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT and event.is_pressed():
		var mouse_pos: Vector2 = get_viewport().get_mouse_position()
		var grid_pos: Vector2i = Vector2i(mouse_pos / SettlementManager.astar_grid.cell_size)
		SettlementManager.place_building(test_building_data, grid_pos)
		get_viewport().set_input_as_handled()

func _instance_ui() -> void:
	welcome_popup = welcome_popup_scene.instantiate()
	ui_layer.add_child(welcome_popup)
	welcome_popup.collect_button_pressed.connect(_on_payout_collected)

func _on_payout_collected(payout: Dictionary) -> void:
	SettlementManager.deposit_loot(payout)
	start_attack_button.disabled = false # Re-enable combat
	storefront_ui.show()

func _find_and_setup_great_hall() -> void:
	for building in SettlementManager.building_container.get_children():
		if building is BaseBuilding and building.data.display_name == "Great Hall":
			great_hall_instance = building
			great_hall_instance.building_destroyed.connect(_on_great_hall_destroyed)
			print("Great Hall found and connected.")
			return
	push_error("SettlementBridge: Could not find Great Hall instance after loading settlement.")


func _spawn_raider_for_test() -> void:
	if not great_hall_instance:
		push_error("Cannot spawn raider: Great Hall does not exist.")
		return
		
	var raider_instance: BaseUnit = raider_scene.instantiate()
	unit_container.add_child(raider_instance)
	raider_instance.global_position = RAIDER_SPAWN_POS
	raider_instance.set_attack_target(great_hall_instance)


func _on_great_hall_destroyed(_building: BaseBuilding) -> void:
	print("GAME OVER: The Great Hall has been destroyed!")
	game_is_over = true
	var label : Label = $UI/Label
	label.text = "YOU HAVE BEEN SACKED."
	restart_button.show()
	_destroy_all_enemies()

func _destroy_all_enemies() -> void:
	for enemy in unit_container.get_children():
		enemy.queue_free()
	print("All surviving enemies have been removed.")

func _on_restart_pressed() -> void:
	get_tree().reload_current_scene()

func _on_start_attack_pressed() -> void:
	print("Start Attack button pressed. Spawning raider.")
	# Timestamps are no longer needed for a fixed-payout system.
	_spawn_raider_for_test()
	start_attack_button.hide()
	storefront_ui.hide()

--- SCRIPT: res://scripts/units/Base_Unit.gd ---
# res://scenes/units/Base_Unit.gd
#
# --- MODIFIED: Added AttackTimer reference ---

class_name BaseUnit
extends CharacterBody2D

@export var data: UnitData
var fsm: UnitFSM
var current_health: int = 50

# --- ADDED ---
@onready var attack_timer: Timer = $AttackTimer

func _ready() -> void:
	if not data:
		push_warning("BaseUnit scene is missing its BuildingData resource.")
		return
	
	current_health = data.max_health
	
	# --- MODIFIED ---
	# Pass the timer reference to the FSM
	fsm = UnitFSM.new(self, attack_timer)
	
	EventBus.pathfinding_grid_updated.connect(_on_grid_updated)

func _exit_tree() -> void:
	if EventBus.is_connected("pathfinding_grid_updated", _on_grid_updated):
		EventBus.pathfinding_grid_updated.disconnect(_on_grid_updated)

func _on_grid_updated(_grid_pos: Vector2i) -> void:
	if fsm and fsm.current_state == UnitFSM.State.MOVE:
		fsm.recalculate_path()

func _physics_process(delta: float) -> void:
	if fsm:
		fsm.update(delta)
	
	if not fsm or fsm.current_state != UnitFSM.State.MOVE:
		velocity = Vector2.ZERO
		move_and_slide()

func take_damage(amount: int) -> void:
	current_health = max(0, current_health - amount)
	print("%s took %d damage, %d HP remaining." % [data.display_name, amount, current_health])
	if current_health == 0:
		die()

func die() -> void:
	print("%s has been killed." % data.display_name)
	queue_free()

--- SCRIPT: res://scripts/units/VikingRaider.gd ---
# res://scripts/units/VikingRaider.gd
#
# Concrete implementation of the Viking Raider enemy unit.
#
# --- MODIFIED: Target position is now adjacent to the Hall ---

extends BaseUnit

# This function is called by the 'SettlementBridge' spawner
func set_attack_target(target: BaseBuilding) -> void:
	"""
	Gives the Raider its one and only goal.
	"""
	if not fsm or not is_instance_valid(target):
		push_warning("Raider FSM or target is not valid.")
		return

	# Set the node (for attacking)
	fsm.target_node = target
	
	# --- THIS IS THE FIX ---
	# Set the position (for moving) to be one tile *below*
	# the Hall's center. This is a walkable tile, so
	# pathfinding will succeed.
	fsm.target_position = target.global_position + Vector2(0, 32)
	
	# Start the FSM
	fsm.change_state(UnitFSM.State.MOVE)
	print("Viking Raider initialized and moving to target: %s" % target.data.display_name)

--- SCRIPT: res://ui/StorefrontUI.gd ---
# res://ui/StorefrontUI.gd
extends Control

# --- Node References ---
@onready var gold_label: Label = $PanelContainer/MarginContainer/VBoxContainer/TreasuryDisplay/GoldLabel
@onready var wood_label: Label = $PanelContainer/MarginContainer/VBoxContainer/TreasuryDisplay/WoodLabel
@onready var food_label: Label = $PanelContainer/MarginContainer/VBoxContainer/TreasuryDisplay/FoodLabel
@onready var stone_label: Label = $PanelContainer/MarginContainer/VBoxContainer/TreasuryDisplay/StoneLabel
@onready var buy_wall_button: Button = $PanelContainer/MarginContainer/VBoxContainer/BuildButtons/BuyWallButton
@onready var buy_lumber_yard_button: Button = $PanelContainer/MarginContainer/VBoxContainer/BuildButtons/BuyLumberYardButton

# --- Data ---
var wall_data: BuildingData = preload("res://data/buildings/Bldg_Wall.tres")
var lumber_yard_data: BuildingData = preload("res://data/buildings/LumberYard.tres")


func _ready() -> void:
	EventBus.treasury_updated.connect(_update_treasury_display)
	
	if SettlementManager.current_settlement:
		_update_treasury_display(SettlementManager.current_settlement.treasury)
	else:
		_update_treasury_display({"gold": 0, "wood": 0, "food": 0, "stone": 0})

	buy_wall_button.pressed.connect(_on_buy_button_pressed.bind(wall_data))
	buy_lumber_yard_button.pressed.connect(_on_buy_button_pressed.bind(lumber_yard_data))


func _update_treasury_display(new_treasury: Dictionary) -> void:
	gold_label.text = "Gold: %d" % new_treasury.get("gold", 0)
	wood_label.text = "Wood: %d" % new_treasury.get("wood", 0)
	food_label.text = "Food: %d" % new_treasury.get("food", 0)
	stone_label.text = "Stone: %d" % new_treasury.get("stone", 0)

func _on_buy_button_pressed(item_data: BuildingData) -> void:
	if not item_data:
		return
	
	print("UI attempting to purchase '%s'." % item_data.display_name)
	var purchase_successful: bool = SettlementManager.attempt_purchase(item_data.build_cost)
	
	if purchase_successful:
		print("UI received purchase confirmation for '%s'." % item_data.display_name)
		var test_grid_pos = Vector2i(10, 15) # TODO: Replace with player input
		var new_building = SettlementManager.place_building(item_data, test_grid_pos)
		
		if new_building and SettlementManager.current_settlement:
			var building_entry = {
				"resource_path": item_data.resource_path,
				"grid_position": test_grid_pos
			}
			SettlementManager.current_settlement.placed_buildings.append(building_entry)
			print("Added %s to persistent settlement data." % item_data.display_name)
			SettlementManager.save_settlement()
	else:
		print("UI received purchase failure for '%s'." % item_data.display_name)

--- SCRIPT: res://ui/WelcomeHomePopup.gd ---
# res://ui/WelcomeHomePopup.gd
extends PanelContainer

signal collect_button_pressed(payout: Dictionary)

@onready var payout_label: Label = $MarginContainer/VBoxContainer/PayoutLabel
@onready var collect_button: Button = $MarginContainer/VBoxContainer/CollectButton

var _current_payout: Dictionary = {}

func _ready() -> void:
	collect_button.pressed.connect(_on_collect_pressed)
	hide()

func display_payout(payout: Dictionary) -> void:
	if payout.is_empty():
		return

	_current_payout = payout
	var payout_text: String = "Welcome home!\n\nResources gathered:\n"
	for resource_type in payout:
		payout_text += "- %s: %d\n" % [resource_type.capitalize(), payout[resource_type]]
	
	payout_label.text = payout_text
	show()

func _on_collect_pressed() -> void:
	collect_button_pressed.emit(_current_payout)
	hide()
--- END OF CODEBASE ---

---
