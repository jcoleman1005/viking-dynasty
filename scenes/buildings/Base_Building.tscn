[gd_scene load_steps=4 format=3 uid="uid://cws6xle5x52g4"]

[ext_resource type="Texture2D" uid="uid://ds2w780g4nf1t" path="res://textures/placeholders/building_placeholder.tres" id="1_dhpbq"]

[sub_resource type="GDScript" id="GDScript_xvrn3"]
script/source = "# res://scenes/buildings/Base_Building.gd
#
# --- MODIFIED: Added 'building_destroyed' signal ---

class_name BaseBuilding
extends StaticBody2D

## This signal is emitted when health reaches zero.
## GDD Ref:
signal building_destroyed(building: BaseBuilding)

@export var data: BuildingData
var current_health: int = 100

func _ready() -> void:
	if not data:
		push_warning(\"BaseBuilding scene is missing its BuildingData resource.\")
		return
	
	current_health = data.max_health

func take_damage(amount: int) -> void:
	current_health = max(0, current_health - amount)
	print(\"%s took %d damage, %d HP remaining.\" % [data.display_name, amount, current_health])
	
	if current_health == 0:
		die()

func die() -> void:
	print(\"%s has been destroyed.\" % data.display_name)
	
	# --- ADDED ---
	# Emit the signal *before* queue_free() so listeners
	# can react before the node is deleted.
	building_destroyed.emit(self)
	
	queue_free()
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_b5w0v"]
size = Vector2(32, 32)

[node name="Base_Building" type="StaticBody2D"]
script = SubResource("GDScript_xvrn3")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_dhpbq")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_b5w0v")
